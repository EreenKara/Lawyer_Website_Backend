trigger:
- main

variables:
  dockerRegistryServiceConnection: 'ce4d70bd-119d-4e55-891e-b40d90928fc9'
  azureSubscription: 'Azure subscription 1 (0225048e-489f-44f9-beb2-8c921189eb71)' 
  containerRegistry: 'avukatliksitesi.azurecr.io'
  imageRepository: 'backend'
  dockerfilePath: '$(Build.SourcesDirectory)/avukatlik_sitesi/Dockerfile'
  tag: '$(Build.BuildId)'
  vmImageName: 'ubuntu-latest'
  appName: 'avukatlik-backend-app'

stages:

# =======================
# 1. TEST AŞAMASI
# =======================
- stage: Test
  displayName: Run Backend Tests
  jobs:
  - job: Test
    displayName: Django Unit Tests with PostgreSQL
    pool:
      name: local-pool
    steps:
    - script: |
        docker run -d --name test-db -e POSTGRES_DB=lawfirm_db -e POSTGRES_USER=admin -e POSTGRES_PASSWORD=admin123 -p 55432:5432 postgres:latest
      displayName: 'Start PostgreSQL Container'

    - script: copy avukatlik_sitesi\.env .env
      displayName: 'Copy .env to root'

    - script: |
        python -m pip install --upgrade pip
        pip install -r avukatlik_sitesi/requirements.txt
        cd avukatlik_sitesi
        python manage.py migrate
        python manage.py test
      displayName: 'Run Django Tests'

    - script: docker rm -f test-db
      displayName: 'Remove PostgreSQL Container'
      condition: always()

# ========================
# 2. BUILD & PUSH AŞAMASI
# ========================
- stage: Build
  displayName: Build and Push Docker Image
  dependsOn: Test
  condition: succeeded()
  jobs:
  - job: Build
    displayName: Build Docker Image
    pool:
      name: local-pool
    steps:
    - task: Docker@2
      displayName: 'Build and Push Docker Image'
      inputs:
        command: buildAndPush
        repository: $(imageRepository)
        dockerfile: $(dockerfilePath)
        containerRegistry: $(dockerRegistryServiceConnection)
        tags: |
          $(tag)
          latest

    - task: PublishBuildArtifacts@1
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)'
        ArtifactName: 'docker-info'
        publishLocation: 'Container'

# ========================
# 3. GÜVENLİK TARAMASI (TRIVY)
# ========================
#- stage: Scan
#  displayName: Docker Image Security Scan
#  dependsOn: Build
#  condition: succeeded()
#  jobs:
#  - job: ScanImage
#    displayName: Trivy Scan
#    pool:
#      name: local-pool
#    steps:
#    - task: PowerShell@2
#      displayName: 'Run Trivy Vulnerability Scan (Windows)'
#      inputs:
#        targetType: 'inline'
#        script: |
#          $trivyUrl = "https://github.com/aquasecurity/trivy/releases/download/v0.50.1/trivy_0.50.1_Windows-64bit.zip"
#          Invoke-WebRequest -Uri $trivyUrl -OutFile "trivy.zip"
#          Expand-Archive -Path "trivy.zip" -DestinationPath ".\trivy"
#          .\trivy\trivy.exe image $(containerRegistry)/$(imageRepository):$(tag)

# ========================
# 4. DEPLOY AŞAMASI
# ========================
- stage: Deploy
  displayName: Deploy to Azure Web App
#  dependsOn: Scan
  condition: succeeded()
  jobs:
  - job: DeployWebApp
    displayName: Deploy to Azure App Service
    pool:
      name: local-pool
    steps:
    - task: AzureWebAppContainer@1
      inputs:
        azureSubscription: $(azureSubscription)
        appName: $(appName)
        containers: |
          $(containerRegistry)/$(imageRepository):$(tag)
